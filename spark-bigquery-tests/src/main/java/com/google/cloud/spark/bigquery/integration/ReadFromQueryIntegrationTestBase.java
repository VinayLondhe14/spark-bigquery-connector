/*
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.spark.bigquery.integration;

import static com.google.common.truth.Truth.assertThat;
import static org.junit.Assert.assertThrows;

import com.google.cloud.bigquery.BigQuery;
import com.google.cloud.bigquery.BigQueryOptions;
import java.util.Arrays;
import java.util.List;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Encoders;
import org.apache.spark.sql.Row;
import org.junit.Test;

class ReadFromQueryIntegrationTestBase extends SparkBigQueryIntegrationTestBase {

  private BigQuery bq;

  protected ReadFromQueryIntegrationTestBase() {
    super();
    this.bq = BigQueryOptions.getDefaultInstance().getService();
  }

  private void testReadFromQueryInternal(String query) {
    Dataset<Row> df =
        spark
            .read()
            .format("bigquery")
            .option("viewsEnabled", true)
            .option("materializationDataset", testDataset.toString())
            .option("readDataFormat", "avro")
            .load(query);
    df.show();
    //validateResult(df);
  }

  @Test
  public void testReadFromQuery() {
    // the query suffix is to make sure that each format will have
    // a different table created due to the destination table cache
    String random = String.valueOf(System.nanoTime());
    String query = "SELECT * FROM ( SELECT * FROM ( SELECT * FROM ( SELECT ( SUBQUERY_0.SUBQUERY_17_COL_0 ) AS SUBQUERY_1_COL_0 , ( SUBQUERY_0.SUBQUERY_17_COL_1 ) AS SUBQUERY_1_COL_1 , ( SUBQUERY_0.SUBQUERY_17_COL_2 ) AS SUBQUERY_1_COL_2 , ( SUBQUERY_0.SUBQUERY_17_COL_3 ) AS SUBQUERY_1_COL_3 , ( SUBQUERY_0.SUBQUERY_17_COL_4 ) AS SUBQUERY_1_COL_4 FROM ( ( SELECT ( 'web' ) AS SUBQUERY_17_COL_0 , ( SUBQUERY_16.SUBQUERY_15_COL_0 ) AS SUBQUERY_17_COL_1 , ( SUBQUERY_16.SUBQUERY_15_COL_1 ) AS SUBQUERY_17_COL_2 , ( SUBQUERY_16.SUBQUERY_15_COL_3 ) AS SUBQUERY_17_COL_3 , ( SUBQUERY_16.SUBQUERY_15_COL_4 ) AS SUBQUERY_17_COL_4 FROM ( SELECT * FROM ( SELECT ( SUBQUERY_14.SUBQUERY_14_COL_0 ) AS SUBQUERY_15_COL_0 , ( SUBQUERY_14.SUBQUERY_14_COL_1 ) AS SUBQUERY_15_COL_1 , ( SUBQUERY_14.SUBQUERY_14_COL_2 ) AS SUBQUERY_15_COL_2 , ( SUBQUERY_14.SUBQUERY_14_COL_3 ) AS SUBQUERY_15_COL_3 , ( RANK () OVER ( ORDER BY ( SUBQUERY_14.SUBQUERY_14_COL_2 ) ASC ) ) AS SUBQUERY_15_COL_4 FROM ( SELECT ( SUBQUERY_13.SUBQUERY_13_COL_0 ) AS SUBQUERY_14_COL_0 , ( SUBQUERY_13.SUBQUERY_13_COL_1 ) AS SUBQUERY_14_COL_1 , ( SUBQUERY_13.SUBQUERY_13_COL_2 ) AS SUBQUERY_14_COL_2 , ( RANK () OVER ( ORDER BY ( SUBQUERY_13.SUBQUERY_13_COL_1 ) ASC ) ) AS SUBQUERY_14_COL_3 FROM ( SELECT ( SUBQUERY_12.SUBQUERY_12_COL_0 ) AS SUBQUERY_13_COL_0 , ( CAST ( ( CAST ( SUM ( COALESCE ( SUBQUERY_12.SUBQUERY_12_COL_3 , 0 ) ) AS BIGDECIMAL ) / CAST ( SUM ( COALESCE ( SUBQUERY_12.SUBQUERY_12_COL_1 , 0 ) ) AS BIGDECIMAL ) ) AS BIGDECIMAL ) ) AS SUBQUERY_13_COL_1 , ( CAST ( ( CAST ( SUM ( COALESCE ( SUBQUERY_12.SUBQUERY_12_COL_4 , 0.0 ) ) AS BIGDECIMAL ) / CAST ( SUM ( COALESCE ( SUBQUERY_12.SUBQUERY_12_COL_2 , 0.0 ) ) AS BIGDECIMAL ) ) AS BIGDECIMAL ) ) AS SUBQUERY_13_COL_2 FROM ( SELECT ( SUBQUERY_11.SUBQUERY_11_COL_1 ) AS SUBQUERY_12_COL_0 , ( SUBQUERY_11.SUBQUERY_11_COL_2 ) AS SUBQUERY_12_COL_1 , ( SUBQUERY_11.SUBQUERY_11_COL_3 ) AS SUBQUERY_12_COL_2 , ( SUBQUERY_11.SUBQUERY_11_COL_4 ) AS SUBQUERY_12_COL_3 , ( SUBQUERY_11.SUBQUERY_11_COL_5 ) AS SUBQUERY_12_COL_4 FROM ( SELECT ( SUBQUERY_7.SUBQUERY_7_COL_0 ) AS SUBQUERY_11_COL_0 , ( SUBQUERY_7.SUBQUERY_7_COL_1 ) AS SUBQUERY_11_COL_1 , ( SUBQUERY_7.SUBQUERY_7_COL_2 ) AS SUBQUERY_11_COL_2 , ( SUBQUERY_7.SUBQUERY_7_COL_3 ) AS SUBQUERY_11_COL_3 , ( SUBQUERY_7.SUBQUERY_7_COL_4 ) AS SUBQUERY_11_COL_4 , ( SUBQUERY_7.SUBQUERY_7_COL_5 ) AS SUBQUERY_11_COL_5 , ( SUBQUERY_10.SUBQUERY_10_COL_0 ) AS SUBQUERY_11_COL_6 FROM ( SELECT ( SUBQUERY_6.SUBQUERY_6_COL_0 ) AS SUBQUERY_7_COL_0 , ( SUBQUERY_6.SUBQUERY_6_COL_1 ) AS SUBQUERY_7_COL_1 , ( SUBQUERY_6.SUBQUERY_6_COL_3 ) AS SUBQUERY_7_COL_2 , ( SUBQUERY_6.SUBQUERY_6_COL_4 ) AS SUBQUERY_7_COL_3 , ( SUBQUERY_6.SUBQUERY_6_COL_7 ) AS SUBQUERY_7_COL_4 , ( SUBQUERY_6.SUBQUERY_6_COL_8 ) AS SUBQUERY_7_COL_5 FROM ( SELECT ( SUBQUERY_2.SUBQUERY_2_COL_0 ) AS SUBQUERY_6_COL_0 , ( SUBQUERY_2.SUBQUERY_2_COL_1 ) AS SUBQUERY_6_COL_1 , ( SUBQUERY_2.SUBQUERY_2_COL_2 ) AS SUBQUERY_6_COL_2 , ( SUBQUERY_2.SUBQUERY_2_COL_3 ) AS SUBQUERY_6_COL_3 , ( SUBQUERY_2.SUBQUERY_2_COL_4 ) AS SUBQUERY_6_COL_4 , ( SUBQUERY_5.SUBQUERY_5_COL_0 ) AS SUBQUERY_6_COL_5 , ( SUBQUERY_5.SUBQUERY_5_COL_1 ) AS SUBQUERY_6_COL_6 , ( SUBQUERY_5.SUBQUERY_5_COL_2 ) AS SUBQUERY_6_COL_7 , ( SUBQUERY_5.SUBQUERY_5_COL_3 ) AS SUBQUERY_6_COL_8 FROM ( SELECT ( SUBQUERY_1.WS_SOLD_DATE_SK ) AS SUBQUERY_2_COL_0 , ( SUBQUERY_1.WS_ITEM_SK ) AS SUBQUERY_2_COL_1 , ( SUBQUERY_1.WS_ORDER_NUMBER ) AS SUBQUERY_2_COL_2 , ( SUBQUERY_1.WS_QUANTITY ) AS SUBQUERY_2_COL_3 , ( SUBQUERY_1.WS_NET_PAID ) AS SUBQUERY_2_COL_4 FROM ( SELECT * FROM ( SELECT * FROM `google.com:hadoop-cloud-dev.tpcds_1T.web_sales` AS BQ_CONNECTOR_QUERY_ALIAS ) AS SUBQUERY_0 WHERE ( ( ( ( ( ( ( ( ( SUBQUERY_0.WS_QUANTITY IS NOT NULL ) AND ( SUBQUERY_0.WS_NET_PAID IS NOT NULL ) ) AND ( SUBQUERY_0.WS_NET_PROFIT IS NOT NULL ) ) AND ( SUBQUERY_0.WS_NET_PROFIT > 1.0 ) ) AND ( SUBQUERY_0.WS_NET_PAID > 0.0 ) ) AND ( SUBQUERY_0.WS_QUANTITY > 0 ) ) AND ( SUBQUERY_0.WS_ORDER_NUMBER IS NOT NULL ) ) AND ( SUBQUERY_0.WS_ITEM_SK IS NOT NULL ) ) AND ( SUBQUERY_0.WS_SOLD_DATE_SK IS NOT NULL ) ) ) AS SUBQUERY_1 ) AS SUBQUERY_2 INNER JOIN ( SELECT ( SUBQUERY_4.WR_ITEM_SK ) AS SUBQUERY_5_COL_0 , ( SUBQUERY_4.WR_ORDER_NUMBER ) AS SUBQUERY_5_COL_1 , ( SUBQUERY_4.WR_RETURN_QUANTITY ) AS SUBQUERY_5_COL_2 , ( SUBQUERY_4.WR_RETURN_AMT ) AS SUBQUERY_5_COL_3 FROM ( SELECT * FROM ( SELECT * FROM `google.com:hadoop-cloud-dev.tpcds_1T.web_returns` AS BQ_CONNECTOR_QUERY_ALIAS ) AS SUBQUERY_3 WHERE ( ( ( ( SUBQUERY_3.WR_RETURN_AMT IS NOT NULL ) AND ( SUBQUERY_3.WR_RETURN_AMT > 10000.0 ) ) AND ( SUBQUERY_3.WR_ITEM_SK IS NOT NULL ) ) AND ( SUBQUERY_3.WR_ORDER_NUMBER IS NOT NULL ) ) ) AS SUBQUERY_4 ) AS SUBQUERY_5 ON ( ( SUBQUERY_2.SUBQUERY_2_COL_2 = SUBQUERY_5.SUBQUERY_5_COL_1 ) AND ( SUBQUERY_2.SUBQUERY_2_COL_1 = SUBQUERY_5.SUBQUERY_5_COL_0 ) ) ) AS SUBQUERY_6 ) AS SUBQUERY_7 INNER JOIN ( SELECT ( SUBQUERY_9.D_DATE_SK ) AS SUBQUERY_10_COL_0 FROM ( SELECT * FROM ( SELECT * FROM `google.com:hadoop-cloud-dev.tpcds_1T.date_dim` AS BQ_CONNECTOR_QUERY_ALIAS ) AS SUBQUERY_8 WHERE ( ( ( ( ( SUBQUERY_8.D_YEAR IS NOT NULL ) AND ( SUBQUERY_8.D_MOY IS NOT NULL ) ) AND ( SUBQUERY_8.D_YEAR = 2001 ) ) AND ( SUBQUERY_8.D_MOY = 12 ) ) AND ( SUBQUERY_8.D_DATE_SK IS NOT NULL ) ) ) AS SUBQUERY_9 ) AS SUBQUERY_10 ON ( SUBQUERY_7.SUBQUERY_7_COL_0 = SUBQUERY_10.SUBQUERY_10_COL_0 ) ) AS SUBQUERY_11 ) AS SUBQUERY_12 GROUP BY SUBQUERY_12.SUBQUERY_12_COL_0 ) AS SUBQUERY_13 ) AS SUBQUERY_14 ) AS SUBQUERY_15 WHERE ( ( SUBQUERY_15.SUBQUERY_15_COL_3 <= 10 ) OR ( SUBQUERY_15.SUBQUERY_15_COL_4 <= 10 ) ) ) AS SUBQUERY_16 ) UNION ALL ( SELECT ( 'catalog' ) AS SUBQUERY_18_COL_0 , ( SUBQUERY_17.SUBQUERY_16_COL_0 ) AS SUBQUERY_18_COL_1 , ( SUBQUERY_17.SUBQUERY_16_COL_1 ) AS SUBQUERY_18_COL_2 , ( SUBQUERY_17.SUBQUERY_16_COL_3 ) AS SUBQUERY_18_COL_3 , ( SUBQUERY_17.SUBQUERY_16_COL_2 ) AS SUBQUERY_18_COL_4 FROM ( SELECT * FROM ( SELECT ( SUBQUERY_15.SUBQUERY_15_COL_0 ) AS SUBQUERY_16_COL_0 , ( SUBQUERY_15.SUBQUERY_15_COL_1 ) AS SUBQUERY_16_COL_1 , ( SUBQUERY_15.SUBQUERY_15_COL_2 ) AS SUBQUERY_16_COL_2 , ( RANK () OVER ( ORDER BY ( SUBQUERY_15.SUBQUERY_15_COL_1 ) ASC ) ) AS SUBQUERY_16_COL_3 FROM ( SELECT ( SUBQUERY_14.SUBQUERY_14_COL_0 ) AS SUBQUERY_15_COL_0 , ( SUBQUERY_14.SUBQUERY_14_COL_1 ) AS SUBQUERY_15_COL_1 , ( SUBQUERY_14.SUBQUERY_14_COL_3 ) AS SUBQUERY_15_COL_2 FROM ( SELECT ( SUBQUERY_13.SUBQUERY_13_COL_0 ) AS SUBQUERY_14_COL_0 , ( SUBQUERY_13.SUBQUERY_13_COL_1 ) AS SUBQUERY_14_COL_1 , ( SUBQUERY_13.SUBQUERY_13_COL_2 ) AS SUBQUERY_14_COL_2 , ( RANK () OVER ( ORDER BY ( SUBQUERY_13.SUBQUERY_13_COL_2 ) ASC ) ) AS SUBQUERY_14_COL_3 FROM ( SELECT ( SUBQUERY_12.SUBQUERY_12_COL_0 ) AS SUBQUERY_13_COL_0 , ( CAST ( ( CAST ( SUM ( COALESCE ( SUBQUERY_12.SUBQUERY_12_COL_3 , 0 ) ) AS BIGDECIMAL ) / CAST ( SUM ( COALESCE ( SUBQUERY_12.SUBQUERY_12_COL_1 , 0 ) ) AS BIGDECIMAL ) ) AS BIGDECIMAL ) ) AS SUBQUERY_13_COL_1 , ( CAST ( ( CAST ( SUM ( COALESCE ( SUBQUERY_12.SUBQUERY_12_COL_4 , 0.0 ) ) AS BIGDECIMAL ) / CAST ( SUM ( COALESCE ( SUBQUERY_12.SUBQUERY_12_COL_2 , 0.0 ) ) AS BIGDECIMAL ) ) AS BIGDECIMAL ) ) AS SUBQUERY_13_COL_2 FROM ( SELECT ( SUBQUERY_11.SUBQUERY_11_COL_1 ) AS SUBQUERY_12_COL_0 , ( SUBQUERY_11.SUBQUERY_11_COL_2 ) AS SUBQUERY_12_COL_1 , ( SUBQUERY_11.SUBQUERY_11_COL_3 ) AS SUBQUERY_12_COL_2 , ( SUBQUERY_11.SUBQUERY_11_COL_4 ) AS SUBQUERY_12_COL_3 , ( SUBQUERY_11.SUBQUERY_11_COL_5 ) AS SUBQUERY_12_COL_4 FROM ( SELECT ( SUBQUERY_7.SUBQUERY_7_COL_0 ) AS SUBQUERY_11_COL_0 , ( SUBQUERY_7.SUBQUERY_7_COL_1 ) AS SUBQUERY_11_COL_1 , ( SUBQUERY_7.SUBQUERY_7_COL_2 ) AS SUBQUERY_11_COL_2 , ( SUBQUERY_7.SUBQUERY_7_COL_3 ) AS SUBQUERY_11_COL_3 , ( SUBQUERY_7.SUBQUERY_7_COL_4 ) AS SUBQUERY_11_COL_4 , ( SUBQUERY_7.SUBQUERY_7_COL_5 ) AS SUBQUERY_11_COL_5 , ( SUBQUERY_10.SUBQUERY_10_COL_0 ) AS SUBQUERY_11_COL_6 FROM ( SELECT ( SUBQUERY_6.SUBQUERY_6_COL_0 ) AS SUBQUERY_7_COL_0 , ( SUBQUERY_6.SUBQUERY_6_COL_1 ) AS SUBQUERY_7_COL_1 , ( SUBQUERY_6.SUBQUERY_6_COL_3 ) AS SUBQUERY_7_COL_2 , ( SUBQUERY_6.SUBQUERY_6_COL_4 ) AS SUBQUERY_7_COL_3 , ( SUBQUERY_6.SUBQUERY_6_COL_7 ) AS SUBQUERY_7_COL_4 , ( SUBQUERY_6.SUBQUERY_6_COL_8 ) AS SUBQUERY_7_COL_5 FROM ( SELECT ( SUBQUERY_2.SUBQUERY_2_COL_0 ) AS SUBQUERY_6_COL_0 , ( SUBQUERY_2.SUBQUERY_2_COL_1 ) AS SUBQUERY_6_COL_1 , ( SUBQUERY_2.SUBQUERY_2_COL_2 ) AS SUBQUERY_6_COL_2 , ( SUBQUERY_2.SUBQUERY_2_COL_3 ) AS SUBQUERY_6_COL_3 , ( SUBQUERY_2.SUBQUERY_2_COL_4 ) AS SUBQUERY_6_COL_4 , ( SUBQUERY_5.SUBQUERY_5_COL_0 ) AS SUBQUERY_6_COL_5 , ( SUBQUERY_5.SUBQUERY_5_COL_1 ) AS SUBQUERY_6_COL_6 , ( SUBQUERY_5.SUBQUERY_5_COL_2 ) AS SUBQUERY_6_COL_7 , ( SUBQUERY_5.SUBQUERY_5_COL_3 ) AS SUBQUERY_6_COL_8 FROM ( SELECT ( SUBQUERY_1.CS_SOLD_DATE_SK ) AS SUBQUERY_2_COL_0 , ( SUBQUERY_1.CS_ITEM_SK ) AS SUBQUERY_2_COL_1 , ( SUBQUERY_1.CS_ORDER_NUMBER ) AS SUBQUERY_2_COL_2 , ( SUBQUERY_1.CS_QUANTITY ) AS SUBQUERY_2_COL_3 , ( SUBQUERY_1.CS_NET_PAID ) AS SUBQUERY_2_COL_4 FROM ( SELECT * FROM ( SELECT * FROM `google.com:hadoop-cloud-dev.tpcds_1T.catalog_sales` AS BQ_CONNECTOR_QUERY_ALIAS ) AS SUBQUERY_0 WHERE ( ( ( ( ( ( ( ( ( SUBQUERY_0.CS_NET_PROFIT IS NOT NULL ) AND ( SUBQUERY_0.CS_NET_PAID IS NOT NULL ) ) AND ( SUBQUERY_0.CS_QUANTITY IS NOT NULL ) ) AND ( SUBQUERY_0.CS_NET_PROFIT > 1.0 ) ) AND ( SUBQUERY_0.CS_NET_PAID > 0.0 ) ) AND ( SUBQUERY_0.CS_QUANTITY > 0 ) ) AND ( SUBQUERY_0.CS_ORDER_NUMBER IS NOT NULL ) ) AND ( SUBQUERY_0.CS_ITEM_SK IS NOT NULL ) ) AND ( SUBQUERY_0.CS_SOLD_DATE_SK IS NOT NULL ) ) ) AS SUBQUERY_1 ) AS SUBQUERY_2 INNER JOIN ( SELECT ( SUBQUERY_4.CR_ITEM_SK ) AS SUBQUERY_5_COL_0 , ( SUBQUERY_4.CR_ORDER_NUMBER ) AS SUBQUERY_5_COL_1 , ( SUBQUERY_4.CR_RETURN_QUANTITY ) AS SUBQUERY_5_COL_2 , ( SUBQUERY_4.CR_RETURN_AMOUNT ) AS SUBQUERY_5_COL_3 FROM ( SELECT * FROM ( SELECT * FROM `google.com:hadoop-cloud-dev.tpcds_1T.catalog_returns` AS BQ_CONNECTOR_QUERY_ALIAS ) AS SUBQUERY_3 WHERE ( ( ( ( SUBQUERY_3.CR_RETURN_AMOUNT IS NOT NULL ) AND ( SUBQUERY_3.CR_RETURN_AMOUNT > 10000.0 ) ) AND ( SUBQUERY_3.CR_ORDER_NUMBER IS NOT NULL ) ) AND ( SUBQUERY_3.CR_ITEM_SK IS NOT NULL ) ) ) AS SUBQUERY_4 ) AS SUBQUERY_5 ON ( ( SUBQUERY_2.SUBQUERY_2_COL_2 = SUBQUERY_5.SUBQUERY_5_COL_1 ) AND ( SUBQUERY_2.SUBQUERY_2_COL_1 = SUBQUERY_5.SUBQUERY_5_COL_0 ) ) ) AS SUBQUERY_6 ) AS SUBQUERY_7 INNER JOIN ( SELECT ( SUBQUERY_9.D_DATE_SK ) AS SUBQUERY_10_COL_0 FROM ( SELECT * FROM ( SELECT * FROM `google.com:hadoop-cloud-dev.tpcds_1T.date_dim` AS BQ_CONNECTOR_QUERY_ALIAS ) AS SUBQUERY_8 WHERE ( ( ( ( ( SUBQUERY_8.D_YEAR IS NOT NULL ) AND ( SUBQUERY_8.D_MOY IS NOT NULL ) ) AND ( SUBQUERY_8.D_YEAR = 2001 ) ) AND ( SUBQUERY_8.D_MOY = 12 ) ) AND ( SUBQUERY_8.D_DATE_SK IS NOT NULL ) ) ) AS SUBQUERY_9 ) AS SUBQUERY_10 ON ( SUBQUERY_7.SUBQUERY_7_COL_0 = SUBQUERY_10.SUBQUERY_10_COL_0 ) ) AS SUBQUERY_11 ) AS SUBQUERY_12 GROUP BY SUBQUERY_12.SUBQUERY_12_COL_0 ) AS SUBQUERY_13 ) AS SUBQUERY_14 ) AS SUBQUERY_15 ) AS SUBQUERY_16 WHERE ( ( SUBQUERY_16.SUBQUERY_16_COL_3 <= 10 ) OR ( SUBQUERY_16.SUBQUERY_16_COL_2 <= 10 ) ) ) AS SUBQUERY_17 ) UNION ALL ( SELECT ( 'store' ) AS SUBQUERY_18_COL_0 , ( SUBQUERY_17.SUBQUERY_16_COL_0 ) AS SUBQUERY_18_COL_1 , ( SUBQUERY_17.SUBQUERY_16_COL_1 ) AS SUBQUERY_18_COL_2 , ( SUBQUERY_17.SUBQUERY_16_COL_3 ) AS SUBQUERY_18_COL_3 , ( SUBQUERY_17.SUBQUERY_16_COL_2 ) AS SUBQUERY_18_COL_4 FROM ( SELECT * FROM ( SELECT ( SUBQUERY_15.SUBQUERY_15_COL_0 ) AS SUBQUERY_16_COL_0 , ( SUBQUERY_15.SUBQUERY_15_COL_1 ) AS SUBQUERY_16_COL_1 , ( SUBQUERY_15.SUBQUERY_15_COL_2 ) AS SUBQUERY_16_COL_2 , ( RANK () OVER ( ORDER BY ( SUBQUERY_15.SUBQUERY_15_COL_1 ) ASC ) ) AS SUBQUERY_16_COL_3 FROM ( SELECT ( SUBQUERY_14.SUBQUERY_14_COL_0 ) AS SUBQUERY_15_COL_0 , ( SUBQUERY_14.SUBQUERY_14_COL_1 ) AS SUBQUERY_15_COL_1 , ( SUBQUERY_14.SUBQUERY_14_COL_3 ) AS SUBQUERY_15_COL_2 FROM ( SELECT ( SUBQUERY_13.SUBQUERY_13_COL_0 ) AS SUBQUERY_14_COL_0 , ( SUBQUERY_13.SUBQUERY_13_COL_1 ) AS SUBQUERY_14_COL_1 , ( SUBQUERY_13.SUBQUERY_13_COL_2 ) AS SUBQUERY_14_COL_2 , ( RANK () OVER ( ORDER BY ( SUBQUERY_13.SUBQUERY_13_COL_2 ) ASC ) ) AS SUBQUERY_14_COL_3 FROM ( SELECT ( SUBQUERY_12.SUBQUERY_12_COL_0 ) AS SUBQUERY_13_COL_0 , ( CAST ( ( CAST ( SUM ( COALESCE ( SUBQUERY_12.SUBQUERY_12_COL_3 , 0 ) ) AS BIGDECIMAL ) / CAST ( SUM ( COALESCE ( SUBQUERY_12.SUBQUERY_12_COL_1 , 0 ) ) AS BIGDECIMAL ) ) AS BIGDECIMAL ) ) AS SUBQUERY_13_COL_1 , ( CAST ( ( CAST ( SUM ( COALESCE ( SUBQUERY_12.SUBQUERY_12_COL_4 , 0.0 ) ) AS BIGDECIMAL ) / CAST ( SUM ( COALESCE ( SUBQUERY_12.SUBQUERY_12_COL_2 , 0.0 ) ) AS BIGDECIMAL ) ) AS BIGDECIMAL ) ) AS SUBQUERY_13_COL_2 FROM ( SELECT ( SUBQUERY_11.SUBQUERY_11_COL_1 ) AS SUBQUERY_12_COL_0 , ( SUBQUERY_11.SUBQUERY_11_COL_2 ) AS SUBQUERY_12_COL_1 , ( SUBQUERY_11.SUBQUERY_11_COL_3 ) AS SUBQUERY_12_COL_2 , ( SUBQUERY_11.SUBQUERY_11_COL_4 ) AS SUBQUERY_12_COL_3 , ( SUBQUERY_11.SUBQUERY_11_COL_5 ) AS SUBQUERY_12_COL_4 FROM ( SELECT ( SUBQUERY_7.SUBQUERY_7_COL_0 ) AS SUBQUERY_11_COL_0 , ( SUBQUERY_7.SUBQUERY_7_COL_1 ) AS SUBQUERY_11_COL_1 , ( SUBQUERY_7.SUBQUERY_7_COL_2 ) AS SUBQUERY_11_COL_2 , ( SUBQUERY_7.SUBQUERY_7_COL_3 ) AS SUBQUERY_11_COL_3 , ( SUBQUERY_7.SUBQUERY_7_COL_4 ) AS SUBQUERY_11_COL_4 , ( SUBQUERY_7.SUBQUERY_7_COL_5 ) AS SUBQUERY_11_COL_5 , ( SUBQUERY_10.SUBQUERY_10_COL_0 ) AS SUBQUERY_11_COL_6 FROM ( SELECT ( SUBQUERY_6.SUBQUERY_6_COL_0 ) AS SUBQUERY_7_COL_0 , ( SUBQUERY_6.SUBQUERY_6_COL_1 ) AS SUBQUERY_7_COL_1 , ( SUBQUERY_6.SUBQUERY_6_COL_3 ) AS SUBQUERY_7_COL_2 , ( SUBQUERY_6.SUBQUERY_6_COL_4 ) AS SUBQUERY_7_COL_3 , ( SUBQUERY_6.SUBQUERY_6_COL_7 ) AS SUBQUERY_7_COL_4 , ( SUBQUERY_6.SUBQUERY_6_COL_8 ) AS SUBQUERY_7_COL_5 FROM ( SELECT ( SUBQUERY_2.SUBQUERY_2_COL_0 ) AS SUBQUERY_6_COL_0 , ( SUBQUERY_2.SUBQUERY_2_COL_1 ) AS SUBQUERY_6_COL_1 , ( SUBQUERY_2.SUBQUERY_2_COL_2 ) AS SUBQUERY_6_COL_2 , ( SUBQUERY_2.SUBQUERY_2_COL_3 ) AS SUBQUERY_6_COL_3 , ( SUBQUERY_2.SUBQUERY_2_COL_4 ) AS SUBQUERY_6_COL_4 , ( SUBQUERY_5.SUBQUERY_5_COL_0 ) AS SUBQUERY_6_COL_5 , ( SUBQUERY_5.SUBQUERY_5_COL_1 ) AS SUBQUERY_6_COL_6 , ( SUBQUERY_5.SUBQUERY_5_COL_2 ) AS SUBQUERY_6_COL_7 , ( SUBQUERY_5.SUBQUERY_5_COL_3 ) AS SUBQUERY_6_COL_8 FROM ( SELECT ( SUBQUERY_1.SS_SOLD_DATE_SK ) AS SUBQUERY_2_COL_0 , ( SUBQUERY_1.SS_ITEM_SK ) AS SUBQUERY_2_COL_1 , ( SUBQUERY_1.SS_TICKET_NUMBER ) AS SUBQUERY_2_COL_2 , ( SUBQUERY_1.SS_QUANTITY ) AS SUBQUERY_2_COL_3 , ( SUBQUERY_1.SS_NET_PAID ) AS SUBQUERY_2_COL_4 FROM ( SELECT * FROM ( SELECT * FROM `google.com:hadoop-cloud-dev.tpcds_1T.store_sales` AS BQ_CONNECTOR_QUERY_ALIAS ) AS SUBQUERY_0 WHERE ( ( ( ( ( ( ( ( ( SUBQUERY_0.SS_NET_PAID IS NOT NULL ) AND ( SUBQUERY_0.SS_NET_PROFIT IS NOT NULL ) ) AND ( SUBQUERY_0.SS_QUANTITY IS NOT NULL ) ) AND ( SUBQUERY_0.SS_NET_PROFIT > 1.0 ) ) AND ( SUBQUERY_0.SS_NET_PAID > 0.0 ) ) AND ( SUBQUERY_0.SS_QUANTITY > 0 ) ) AND ( SUBQUERY_0.SS_ITEM_SK IS NOT NULL ) ) AND ( SUBQUERY_0.SS_TICKET_NUMBER IS NOT NULL ) ) AND ( SUBQUERY_0.SS_SOLD_DATE_SK IS NOT NULL ) ) ) AS SUBQUERY_1 ) AS SUBQUERY_2 INNER JOIN ( SELECT ( SUBQUERY_4.SR_ITEM_SK ) AS SUBQUERY_5_COL_0 , ( SUBQUERY_4.SR_TICKET_NUMBER ) AS SUBQUERY_5_COL_1 , ( SUBQUERY_4.SR_RETURN_QUANTITY ) AS SUBQUERY_5_COL_2 , ( SUBQUERY_4.SR_RETURN_AMT ) AS SUBQUERY_5_COL_3 FROM ( SELECT * FROM ( SELECT * FROM `google.com:hadoop-cloud-dev.tpcds_1T.store_returns` AS BQ_CONNECTOR_QUERY_ALIAS ) AS SUBQUERY_3 WHERE ( ( ( ( SUBQUERY_3.SR_RETURN_AMT IS NOT NULL ) AND ( SUBQUERY_3.SR_RETURN_AMT > 10000.0 ) ) AND ( SUBQUERY_3.SR_TICKET_NUMBER IS NOT NULL ) ) AND ( SUBQUERY_3.SR_ITEM_SK IS NOT NULL ) ) ) AS SUBQUERY_4 ) AS SUBQUERY_5 ON ( ( SUBQUERY_2.SUBQUERY_2_COL_2 = SUBQUERY_5.SUBQUERY_5_COL_1 ) AND ( SUBQUERY_2.SUBQUERY_2_COL_1 = SUBQUERY_5.SUBQUERY_5_COL_0 ) ) ) AS SUBQUERY_6 ) AS SUBQUERY_7 INNER JOIN ( SELECT ( SUBQUERY_9.D_DATE_SK ) AS SUBQUERY_10_COL_0 FROM ( SELECT * FROM ( SELECT * FROM `google.com:hadoop-cloud-dev.tpcds_1T.date_dim` AS BQ_CONNECTOR_QUERY_ALIAS ) AS SUBQUERY_8 WHERE ( ( ( ( ( SUBQUERY_8.D_YEAR IS NOT NULL ) AND ( SUBQUERY_8.D_MOY IS NOT NULL ) ) AND ( SUBQUERY_8.D_YEAR = 2001 ) ) AND ( SUBQUERY_8.D_MOY = 12 ) ) AND ( SUBQUERY_8.D_DATE_SK IS NOT NULL ) ) ) AS SUBQUERY_9 ) AS SUBQUERY_10 ON ( SUBQUERY_7.SUBQUERY_7_COL_0 = SUBQUERY_10.SUBQUERY_10_COL_0 ) ) AS SUBQUERY_11 ) AS SUBQUERY_12 GROUP BY SUBQUERY_12.SUBQUERY_12_COL_0 ) AS SUBQUERY_13 ) AS SUBQUERY_14 ) AS SUBQUERY_15 ) AS SUBQUERY_16 WHERE ( ( SUBQUERY_16.SUBQUERY_16_COL_3 <= 10 ) OR ( SUBQUERY_16.SUBQUERY_16_COL_2 <= 10 ) ) ) AS SUBQUERY_17 ) ) AS SUBQUERY_0 GROUP BY SUBQUERY_0.SUBQUERY_17_COL_0 , SUBQUERY_0.SUBQUERY_17_COL_1 , SUBQUERY_0.SUBQUERY_17_COL_2 , SUBQUERY_0.SUBQUERY_17_COL_3 , SUBQUERY_0.SUBQUERY_17_COL_4 ) AS SUBQUERY_1 ORDER BY ( SUBQUERY_1.SUBQUERY_1_COL_0 ) ASC , ( SUBQUERY_1.SUBQUERY_1_COL_3 ) ASC , ( SUBQUERY_1.SUBQUERY_1_COL_4 ) ASC ) AS SUBQUERY_2 ORDER BY ( SUBQUERY_2.SUBQUERY_1_COL_0 ) ASC , ( SUBQUERY_2.SUBQUERY_1_COL_3 ) ASC , ( SUBQUERY_2.SUBQUERY_1_COL_4 ) ASC LIMIT 100 ) AS SUBQUERY_3 ORDER BY ( SUBQUERY_3.SUBQUERY_1_COL_0 ) ASC , ( SUBQUERY_3.SUBQUERY_1_COL_3 ) ASC , ( SUBQUERY_3.SUBQUERY_1_COL_4 ) ASC LIMIT 21";
    testReadFromQueryInternal(query);
  }

  @Test
  public void testReadFromQueryWithNewLine() {
    // the query suffix is to make sure that each format will have
    // a different table created due to the destination table cache
    String random = String.valueOf(System.nanoTime());
    String query =
        String.format(
            "SELECT corpus, word_count FROM `bigquery-public-data.samples.shakespeare`\n"
                + "WHERE word='spark' AND '%s'='%s'",
            random, random);
    testReadFromQueryInternal(query);
  }

  @Test
  public void testQueryOption() {
    // the query suffix is to make sure that each format will have
    // a different table created due to the destination table cache
    String random = String.valueOf(System.nanoTime());
    String query =
        String.format(
            "SELECT corpus, word_count FROM `bigquery-public-data.samples.shakespeare` WHERE word='spark' AND '%s'='%s'",
            random, random);
    Dataset<Row> df =
        spark
            .read()
            .format("bigquery")
            .option("viewsEnabled", true)
            .option("materializationDataset", testDataset.toString())
            .option("query", query)
            .load();

    validateResult(df);
  }

  private void validateResult(Dataset<Row> df) {
    long totalRows = df.count();
    assertThat(totalRows).isEqualTo(9);

    List<String> corpuses = df.select("corpus").as(Encoders.STRING()).collectAsList();
    List<String> expectedCorpuses =
        Arrays.asList(
            "2kinghenryvi",
            "3kinghenryvi",
            "allswellthatendswell",
            "hamlet",
            "juliuscaesar",
            "kinghenryv",
            "kinglear",
            "periclesprinceoftyre",
            "troilusandcressida");
    assertThat(corpuses).containsExactlyElementsIn(expectedCorpuses);
  }

  @Test
  public void testBadQuery() {
    String badSql = "SELECT bogus_column FROM `bigquery-public-data.samples.shakespeare`";
    // v1 throws BigQueryConnectorException
    // v2 throws Guice ProviderException, as the table is materialized in teh module
    assertThrows(
        RuntimeException.class,
        () -> {
          spark
              .read()
              .format("bigquery")
              .option("viewsEnabled", true)
              .option("materializationDataset", testDataset.toString())
              .load(badSql);
        });
  }
}
